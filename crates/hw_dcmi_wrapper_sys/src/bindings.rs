/* automatically generated by rust-bindgen 0.72.0 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const MAX_VER_LEN: u32 = 255;
pub const MAX_CARD_NUM: u32 = 64;
pub const MAX_CHIP_NAME_LEN: u32 = 32;
pub const MAX_LENTH: u32 = 256;
pub const DIE_ID_COUNT: u32 = 5;
pub const MAX_CORE_NUM: u32 = 16;
pub const DCMI_SENSOR_DATA_MAX_LEN: u32 = 16;
pub const DCMI_SENSOR_TEMP_LEN: u32 = 2;
pub const DCMI_SENSOR_NTC_TEMP_LEN: u32 = 4;
pub const DCMI_COMPUTE_GROUP_INFO_RES_NUM: u32 = 8;
pub const DCMI_AICORE_MASK_NUM: u32 = 2;
pub const DCMI_MAX_SPEC_RESERVE: u32 = 8;
pub const DCMI_VF_FLAG_BIT: u32 = 9;
pub const IV_MAX_LEN: u32 = 64;
pub const KEY_MAX_LEN: u32 = 512;
pub const RESERVED_MAX_LEN: u32 = 512;
pub const MAX_RECORD_ECC_ADDR_COUNT: u32 = 64;
pub const TOPO_INFO_MAX_LENTH: u32 = 32;
pub const DCMI_HOST_AICPU_BITMAP_LEN: u32 = 8;
pub const DCMI_HOST_AICPU_THREAD_MODE: u32 = 0;
pub const DCMI_HOST_AICPU_PROCESS_MODE: u32 = 1;
pub const DCMI_HOST_AICPU_RESERVED_LEN: u32 = 16;
pub const DCMI_HCCS_MAX_PCS_NUM: u32 = 16;
pub const DCMI_HCCS_910B_PCS_NUM: u32 = 7;
pub const LANE_MODE_OFFSET: u32 = 9;
pub const LINK_LANE_OFFSET: u32 = 1;
pub const FIRST_ERROR_LANE: u32 = 8;
pub const LANE_MODE_BIT_NUM: u32 = 4;
pub const DCMI_HCCS_STATUS_RESERVED_LEN: u32 = 8;
pub const DCMI_SOC_INFO_RESERVED_LEN: u32 = 8;
pub const DCMI_QOS_TARGET_NUM_MAX: u32 = 16;
pub const DCMI_QOS_CFG_RESERVED_LEN: u32 = 8;
pub const DCMI_QOS_INDEX_OFFSET: u32 = 8;
pub const DCMI_SUB_CMD_MEMORY_TYPE: u32 = 0;
pub const DCMI_SUB_CMD_MEMORY_CAPACITY: u32 = 1;
pub const DCMI_SUB_CMD_MEMORY_CHANNEL: u32 = 2;
pub const DCMI_SUB_CMD_MEMORY_RANK_NUM: u32 = 3;
pub const DCMI_SUB_CMD_MEMORY_ECC_ENABLE: u32 = 4;
pub const DCMI_SUB_CMD_MEMORY_MANUFACTURES: u32 = 5;
pub const DCMI_SUB_CMD_MEMORY_SET_MATA_READ_ONCE: u32 = 30;
pub const DCMI_SUB_CMD_MEMORY_GET_MATA_READ_ONCE: u32 = 31;
pub const DCMI_OS_TYPE_OFFSET: u32 = 24;
pub const DCMI_OS_TYPE_CFG_BIT: u32 = 4278190080;
pub const DCMI_POWER_TYPE_CFG_BIT: u32 = 16777215;
pub const DCMI_INLINE_CRYPTO_RESERVED_LEN: u32 = 4;
pub const DCMI_UFS_DEFAULT_KEY_NUM: u32 = 8;
pub const DCMI_UFS_MAX_MN_LEN: u32 = 18;
pub const DCMI_UFS_MAX_SN_LEN: u32 = 254;
pub const DCMI_UFS_MAX_PI_LEN: u32 = 34;
pub const DCMI_UFS_DESC_LEN: u32 = 255;
pub const DCMI_EX_COMPUTING_SUB_CMD_TOKEN: u32 = 0;
pub const DCMI_SEC_SUB_CMD_PSS: u32 = 0;
pub const DCMI_SRIOV_DISABLE: u32 = 0;
pub const DCMI_SRIOV_ENABLE: u32 = 1;
pub const DCMI_LP_WORK_TOPS_MAX: u32 = 10;
pub const DCMI_LP_WORK_TOPS_RESERVE: u32 = 32;
pub const DCMI_LP_POWER_RESERVED_LEN: u32 = 32;
pub const DCMI_UTILIZATION_RATE_DDR: u32 = 1;
pub const DCMI_UTILIZATION_RATE_AICORE: u32 = 2;
pub const DCMI_UTILIZATION_RATE_AICPU: u32 = 3;
pub const DCMI_UTILIZATION_RATE_CTRLCPU: u32 = 4;
pub const DCMI_UTILIZATION_RATE_DDR_BANDWIDTH: u32 = 5;
pub const DCMI_UTILIZATION_RATE_HBM: u32 = 6;
pub const DCMI_UTILIZATION_RATE_HBM_BANDWIDTH: u32 = 10;
pub const DCMI_UTILIZATION_RATE_VECTORCORE: u32 = 12;
pub const DCMI_UTILIZATION_RATE_NPU: u32 = 13;
pub const DCMI_EVENT_FILTER_FLAG_EVENT_ID: u32 = 1;
pub const DCMI_EVENT_FILTER_FLAG_SERVERITY: u32 = 2;
pub const DCMI_EVENT_FILTER_FLAG_NODE_TYPE: u32 = 4;
pub const DCMI_MAX_EVENT_NAME_LENGTH: u32 = 256;
pub const DCMI_MAX_EVENT_DATA_LENGTH: u32 = 32;
pub const DCMI_MAX_EVENT_RESV_LENGTH: u32 = 32;
pub const DCMI_VDEV_RES_NAME_LEN: u32 = 16;
pub const DCMI_VDEV_FOR_RESERVE: u32 = 32;
pub const DCMI_SOC_SPLIT_MAX: u32 = 32;
pub const CERT_NAME_MAX_LEN: u32 = 16;
pub const TIME_LEN: u32 = 32;
pub const CERT_COMMON_NAME_LEN: u32 = 64;
pub const MAX_CERT_COUNT: u32 = 15;
pub const NPU_CERT_MAX_SIZE: u32 = 2048;
pub const DCMI_CERT_SUB_CMD_INIT_TLS_PUB_KEY: u32 = 0;
pub const DCMI_CERT_SUB_CMD_TLS_CERT_INFO: u32 = 2;
pub const CERT_PERIOD_MIN: u32 = 7;
pub const CERT_PERIOD_MAX: u32 = 180;
pub const CERT_CONFIG_EXPIRED: &[u8; 23] = b"cert_expired_threshold\0";
pub const DEFAULT_EXPIERD_THRESHOLD: u32 = 90;
pub const DCMI_POWER_INFO_RESERVE_LEN: u32 = 8;
pub const AGENTDRV_PROF_DATA_NUM: u32 = 3;
pub const SERDES_RESERVED_LEN: u32 = 64;
pub const SERDES_INFO_NUM: u32 = 8;
pub const IP_ADDR_LEN: u32 = 16;
pub const DCMI_PING_PACKET_NUM_MAX: u32 = 1000;
pub const IP_ADRESS_MAX_LEN: u32 = 48;
pub const TRACEROUTE_RESERVE_MAX_LEN: u32 = 64;
pub const DCMI_OK: u32 = 0;
pub const DCMI_ERROR_CODE_BASE: i32 = -8000;
pub const DCMI_ERR_CODE_INVALID_PARAMETER: i32 = -8001;
pub const DCMI_ERR_CODE_OPER_NOT_PERMITTED: i32 = -8002;
pub const DCMI_ERR_CODE_MEM_OPERATE_FAIL: i32 = -8003;
pub const DCMI_ERR_CODE_SECURE_FUN_FAIL: i32 = -8004;
pub const DCMI_ERR_CODE_INNER_ERR: i32 = -8005;
pub const DCMI_ERR_CODE_TIME_OUT: i32 = -8006;
pub const DCMI_ERR_CODE_INVALID_DEVICE_ID: i32 = -8007;
pub const DCMI_ERR_CODE_DEVICE_NOT_EXIST: i32 = -8008;
pub const DCMI_ERR_CODE_IOCTL_FAIL: i32 = -8009;
pub const DCMI_ERR_CODE_SEND_MSG_FAIL: i32 = -8010;
pub const DCMI_ERR_CODE_RECV_MSG_FAIL: i32 = -8011;
pub const DCMI_ERR_CODE_NOT_REDAY: i32 = -8012;
pub const DCMI_ERR_CODE_NOT_SUPPORT_IN_CONTAINER: i32 = -8013;
pub const DCMI_ERR_CODE_FILE_OPERATE_FAIL: i32 = -8014;
pub const DCMI_ERR_CODE_RESET_FAIL: i32 = -8015;
pub const DCMI_ERR_CODE_ABORT_OPERATE: i32 = -8016;
pub const DCMI_ERR_CODE_IS_UPGRADING: i32 = -8017;
pub const DCMI_ERR_CODE_RESOURCE_OCCUPIED: i32 = -8020;
pub const DCMI_ERR_CODE_PARTITION_NOT_RIGHT: i32 = -8022;
pub const DCMI_ERR_CODE_CONFIG_INFO_NOT_EXIST: i32 = -8023;
pub const DCMI_ERR_CODE_NOT_SUPPORT: i32 = -8255;
pub const DMS_MAX_EVENT_NAME_LENGTH: u32 = 256;
pub const DMS_MAX_EVENT_DATA_LENGTH: u32 = 32;
pub const DMS_MAX_EVENT_RESV_LENGTH: u32 = 32;
pub const TAISHAN_CORE_NUM: u32 = 16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_chip_info {
    pub chip_type: [::std::os::raw::c_uchar; 32usize],
    pub chip_name: [::std::os::raw::c_uchar; 32usize],
    pub chip_ver: [::std::os::raw::c_uchar; 32usize],
    pub aicore_cnt: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_pcie_info {
    pub deviceid: ::std::os::raw::c_uint,
    pub venderid: ::std::os::raw::c_uint,
    pub subvenderid: ::std::os::raw::c_uint,
    pub subdeviceid: ::std::os::raw::c_uint,
    pub bdf_deviceid: ::std::os::raw::c_uint,
    pub bdf_busid: ::std::os::raw::c_uint,
    pub bdf_funcid: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_pcie_info_all {
    pub venderid: ::std::os::raw::c_uint,
    pub subvenderid: ::std::os::raw::c_uint,
    pub deviceid: ::std::os::raw::c_uint,
    pub subdeviceid: ::std::os::raw::c_uint,
    pub domain: ::std::os::raw::c_int,
    pub bdf_busid: ::std::os::raw::c_uint,
    pub bdf_deviceid: ::std::os::raw::c_uint,
    pub bdf_funcid: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_board_info {
    pub board_id: ::std::os::raw::c_uint,
    pub pcb_id: ::std::os::raw::c_uint,
    pub bom_id: ::std::os::raw::c_uint,
    pub slot_id: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_elabel_info {
    pub product_name: [::std::os::raw::c_char; 256usize],
    pub model: [::std::os::raw::c_char; 256usize],
    pub manufacturer: [::std::os::raw::c_char; 256usize],
    pub manufacturer_date: [::std::os::raw::c_char; 256usize],
    pub serial_number: [::std::os::raw::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_die_id {
    pub soc_die: [::std::os::raw::c_uint; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_aicore_info {
    pub freq: ::std::os::raw::c_uint,
    pub cur_freq: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_aicpu_info {
    pub max_freq: ::std::os::raw::c_uint,
    pub cur_freq: ::std::os::raw::c_uint,
    pub aicpu_num: ::std::os::raw::c_uint,
    pub util_rate: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_flash_info {
    pub flash_id: ::std::os::raw::c_ulonglong,
    pub device_id: ::std::os::raw::c_ushort,
    pub vendor: ::std::os::raw::c_ushort,
    pub state: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_ulonglong,
    pub sector_count: ::std::os::raw::c_uint,
    pub manufacturer_id: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_chip_pcie_err_rate {
    pub reg_deskew_fifo_overflow_intr_status: ::std::os::raw::c_uint,
    pub reg_symbol_unlock_intr_status: ::std::os::raw::c_uint,
    pub reg_deskew_unlock_intr_status: ::std::os::raw::c_uint,
    pub reg_phystatus_timeout_intr_status: ::std::os::raw::c_uint,
    pub symbol_unlock_counter: ::std::os::raw::c_uint,
    pub pcs_rx_err_cnt: ::std::os::raw::c_uint,
    pub phy_lane_err_counter: ::std::os::raw::c_uint,
    pub pcs_rcv_err_status: ::std::os::raw::c_uint,
    pub symbol_unlock_err_status: ::std::os::raw::c_uint,
    pub phy_lane_err_status: ::std::os::raw::c_uint,
    pub dl_lcrc_err_num: ::std::os::raw::c_uint,
    pub dl_dcrc_err_num: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ecc_info {
    pub enable_flag: ::std::os::raw::c_int,
    pub single_bit_error_cnt: ::std::os::raw::c_uint,
    pub double_bit_error_cnt: ::std::os::raw::c_uint,
    pub total_single_bit_error_cnt: ::std::os::raw::c_uint,
    pub total_double_bit_error_cnt: ::std::os::raw::c_uint,
    pub single_bit_isolated_pages_cnt: ::std::os::raw::c_uint,
    pub double_bit_isolated_pages_cnt: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_hbm_info {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub freq: ::std::os::raw::c_uint,
    pub memory_usage: ::std::os::raw::c_ulonglong,
    pub temp: ::std::os::raw::c_int,
    pub bandwith_util_rate: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_memory_info {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub freq: ::std::os::raw::c_uint,
    pub utiliza: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_get_memory_info_stru {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub memory_available: ::std::os::raw::c_ulonglong,
    pub freq: ::std::os::raw::c_uint,
    pub hugepagesize: ::std::os::raw::c_ulong,
    pub hugepages_total: ::std::os::raw::c_ulong,
    pub hugepages_free: ::std::os::raw::c_ulong,
    pub utiliza: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uchar; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_hbm_product_info {
    pub manufacturer_id: ::std::os::raw::c_ushort,
    pub reserve: [::std::os::raw::c_uchar; 62usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_dvpp_ratio {
    pub vdec_ratio: ::std::os::raw::c_int,
    pub vpc_ratio: ::std::os::raw::c_int,
    pub venc_ratio: ::std::os::raw::c_int,
    pub jpege_ratio: ::std::os::raw::c_int,
    pub jpegd_ratio: ::std::os::raw::c_int,
}
pub const SM_KEY_TYPE_SM3_NORMAL_SUMMARY: SM_KEY_TYPE = 0;
pub const SM_KEY_TYPE_SM4_CBC_ENCRYPT: SM_KEY_TYPE = 1;
pub const SM_KEY_TYPE_SM4_CBC_DECRYPT: SM_KEY_TYPE = 2;
pub type SM_KEY_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_sm_parm {
    pub key_type: ::std::os::raw::c_uint,
    pub key_len: ::std::os::raw::c_uint,
    pub iv_len: ::std::os::raw::c_uint,
    pub reserves: ::std::os::raw::c_uint,
    pub iv: [::std::os::raw::c_uchar; 64usize],
    pub key: [::std::os::raw::c_uchar; 512usize],
    pub reserved: [::std::os::raw::c_uchar; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_sm_data {
    pub in_buf: *const ::std::os::raw::c_uchar,
    pub in_len: ::std::os::raw::c_uint,
    pub out_buf: *mut ::std::os::raw::c_uchar,
    pub out_len: *mut ::std::os::raw::c_uint,
}
pub const DCMI_TS_ID_DCMI_TS_AICORE: DCMI_TS_ID = 0;
pub const DCMI_TS_ID_DCMI_TS_AIVECTOR: DCMI_TS_ID = 1;
pub type DCMI_TS_ID = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_capability_group_info {
    pub group_id: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub extend_attribute: ::std::os::raw::c_uint,
    pub aicore_number: ::std::os::raw::c_uint,
    pub aivector_number: ::std::os::raw::c_uint,
    pub sdma_number: ::std::os::raw::c_uint,
    pub aicpu_number: ::std::os::raw::c_uint,
    pub active_sq_number: ::std::os::raw::c_uint,
    pub aicore_mask: [::std::os::raw::c_uint; 2usize],
    pub res: [::std::os::raw::c_uint; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_cgroup_info {
    pub limit_in_bytes: ::std::os::raw::c_ulong,
    pub max_usage_in_bytes: ::std::os::raw::c_ulong,
    pub usage_in_bytes: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_llc_perf {
    pub wr_hit_rate: ::std::os::raw::c_uint,
    pub rd_hit_rate: ::std::os::raw::c_uint,
    pub throughput: ::std::os::raw::c_uint,
}
pub const dcmi_ip_addr_type_DCMI_IPADDR_TYPE_V4: dcmi_ip_addr_type = 0;
#[doc = " IPv4"]
pub const dcmi_ip_addr_type_DCMI_IPADDR_TYPE_V6: dcmi_ip_addr_type = 1;
#[doc = " IPv6"]
pub const dcmi_ip_addr_type_DCMI_IPADDR_TYPE_ANY: dcmi_ip_addr_type = 2;
pub type dcmi_ip_addr_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dcmi_ip_addr {
    pub u_addr: dcmi_ip_addr__bindgen_ty_1,
    pub ip_type: dcmi_ip_addr_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dcmi_ip_addr__bindgen_ty_1 {
    pub ip6: [::std::os::raw::c_uchar; 16usize],
    pub ip4: [::std::os::raw::c_uchar; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_proc_mem_info {
    pub proc_id: ::std::os::raw::c_int,
    pub proc_mem_usage: ::std::os::raw::c_ulong,
}
pub const dcmi_reset_channel_OUTBAND_CHANNEL: dcmi_reset_channel = 0;
pub const dcmi_reset_channel_INBAND_CHANNEL: dcmi_reset_channel = 1;
pub type dcmi_reset_channel = ::std::os::raw::c_uint;
pub const dcmi_unit_type_NPU_TYPE: dcmi_unit_type = 0;
pub const dcmi_unit_type_MCU_TYPE: dcmi_unit_type = 1;
pub const dcmi_unit_type_CPU_TYPE: dcmi_unit_type = 2;
pub const dcmi_unit_type_INVALID_TYPE: dcmi_unit_type = 255;
pub type dcmi_unit_type = ::std::os::raw::c_uint;
pub const dcmi_die_type_NDIE: dcmi_die_type = 0;
pub const dcmi_die_type_VDIE: dcmi_die_type = 1;
pub type dcmi_die_type = ::std::os::raw::c_uint;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_OK: dcmi_rdfx_detect_result = 0;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_SOCK_FAIL: dcmi_rdfx_detect_result = 1;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_RECV_TIMEOUT: dcmi_rdfx_detect_result = 2;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_UNREACH: dcmi_rdfx_detect_result = 3;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_TIME_EXCEEDED: dcmi_rdfx_detect_result = 4;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_FAULT: dcmi_rdfx_detect_result = 5;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_INIT: dcmi_rdfx_detect_result = 6;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_THREAD_ERR: dcmi_rdfx_detect_result = 7;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_IP_SET: dcmi_rdfx_detect_result = 8;
pub const dcmi_rdfx_detect_result_DCMI_RDFX_DETECT_MAX: dcmi_rdfx_detect_result = 255;
pub type dcmi_rdfx_detect_result = ::std::os::raw::c_uint;
pub const dcmi_device_compat_DCMI_COMPAT_OK: dcmi_device_compat = 1;
pub const dcmi_device_compat_DCMI_COMPAT_NOK: dcmi_device_compat = 2;
pub const dcmi_device_compat_DCMI_COMPAT_UNKNOWN: dcmi_device_compat = 3;
pub type dcmi_device_compat = ::std::os::raw::c_uint;
pub const dcmi_port_type_DCMI_VNIC_PORT: dcmi_port_type = 0;
pub const dcmi_port_type_DCMI_ROCE_PORT: dcmi_port_type = 1;
pub const dcmi_port_type_DCMI_INVALID_PORT: dcmi_port_type = 2;
pub type dcmi_port_type = ::std::os::raw::c_uint;
pub const dcmi_revo_type_DCMI_REVOCATION_TYPE_SOC: dcmi_revo_type = 0;
pub const dcmi_revo_type_DCMI_REVOCATION_TYPE_CMS_CRL: dcmi_revo_type = 1;
pub const dcmi_revo_type_DCMI_REVOCATION_TYPE_CMS_CRL_EXT: dcmi_revo_type = 2;
pub const dcmi_revo_type_DCMI_REVOCATION_TYPE_MAX: dcmi_revo_type = 3;
pub type dcmi_revo_type = ::std::os::raw::c_uint;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_DVPP: dcmi_main_cmd = 0;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_ISP: dcmi_main_cmd = 1;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_TS_GROUP_NUM: dcmi_main_cmd = 2;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_CAN: dcmi_main_cmd = 3;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_UART: dcmi_main_cmd = 4;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_UPGRADE: dcmi_main_cmd = 5;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_UFS: dcmi_main_cmd = 6;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_OS_POWER: dcmi_main_cmd = 7;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_LP: dcmi_main_cmd = 8;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_MEMORY: dcmi_main_cmd = 9;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_RECOVERY: dcmi_main_cmd = 10;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_TS: dcmi_main_cmd = 11;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_CHIP_INF: dcmi_main_cmd = 12;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_QOS: dcmi_main_cmd = 13;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_SOC_INFO: dcmi_main_cmd = 14;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_SILS: dcmi_main_cmd = 15;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_HCCS: dcmi_main_cmd = 16;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_HOST_AICPU: dcmi_main_cmd = 17;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_TEMP: dcmi_main_cmd = 50;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_SVM: dcmi_main_cmd = 51;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_VDEV_MNG: dcmi_main_cmd = 52;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_SEC: dcmi_main_cmd = 53;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_SIO: dcmi_main_cmd = 56;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_EX_COMPUTING: dcmi_main_cmd = 32768;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_DEVICE_SHARE: dcmi_main_cmd = 32769;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_EX_CERT: dcmi_main_cmd = 32771;
pub const dcmi_main_cmd_DCMI_MAIN_CMD_MAX: dcmi_main_cmd = 32772;
pub type dcmi_main_cmd = ::std::os::raw::c_uint;
pub const DCMI_HOST_AICPU_SUB_CMD_DCMI_SUB_CMD_HOST_AICPU_INFO: DCMI_HOST_AICPU_SUB_CMD = 0;
pub type DCMI_HOST_AICPU_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_host_aicpu_info {
    pub num: ::std::os::raw::c_uint,
    pub bitmap: [::std::os::raw::c_ulonglong; 8usize],
    pub work_mode: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uchar; 16usize],
}
pub const DCMI_HCCS_SUB_CMD_DCMI_HCCS_CMD_GET_STATUS: DCMI_HCCS_SUB_CMD = 0;
pub const DCMI_HCCS_SUB_CMD_DCMI_HCCS_CMD_GET_LANE_INFO: DCMI_HCCS_SUB_CMD = 1;
pub const DCMI_HCCS_SUB_CMD_DCMI_HCCS_CMD_GET_STATISTIC_INFO: DCMI_HCCS_SUB_CMD = 3;
pub const DCMI_HCCS_SUB_CMD_DCMI_HCCS_CMD_MAX: DCMI_HCCS_SUB_CMD = 4;
pub type DCMI_HCCS_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_hccs_lane_info {
    pub hccs_port_pcs_bitmap: ::std::os::raw::c_uint,
    pub pcs_lane_bitmap: [::std::os::raw::c_uint; 16usize],
    pub reserve: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_hccs_statistic_info {
    pub tx_cnt: [::std::os::raw::c_uint; 16usize],
    pub rx_cnt: [::std::os::raw::c_uint; 16usize],
    pub crc_err_cnt: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_hccs_statues {
    pub pcs_status: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uchar; 8usize],
}
pub const DCMI_SIO_SUB_CMD_DCMI_SIO_SUB_CMD_CRC_ERR_STATISTICS: DCMI_SIO_SUB_CMD = 0;
pub type DCMI_SIO_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_sio_crc_err_statistics_info {
    pub tx_error_count: ::std::os::raw::c_ushort,
    pub rx_error_count: ::std::os::raw::c_ushort,
    pub reserved: [::std::os::raw::c_uchar; 8usize],
}
pub const DCMI_SILS_SUB_CMD_DCMI_SILS_SUB_CMD_PMUWDG_DISABLE: DCMI_SILS_SUB_CMD = 0;
pub const DCMI_SILS_SUB_CMD_DCMI_SILS_SUB_CMD_PMUWDG_ENABLE: DCMI_SILS_SUB_CMD = 1;
pub const DCMI_SILS_SUB_CMD_DCMI_SILS_SUB_CMD_PMUWDG_STATUS: DCMI_SILS_SUB_CMD = 2;
pub const DCMI_SILS_SUB_CMD_DCMI_SILS_SUB_CMD_INVALID: DCMI_SILS_SUB_CMD = 255;
pub type DCMI_SILS_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_SOC_INFO_SUB_CMD_DCMI_SOC_INFO_SUB_CMD_DOMAIN_INFO: DCMI_SOC_INFO_SUB_CMD = 0;
pub const DCMI_SOC_INFO_SUB_CMD_DCMI_SOC_INFO_SUB_CMD_MAX: DCMI_SOC_INFO_SUB_CMD = 1;
pub type DCMI_SOC_INFO_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_domain_info {
    pub ai_cpu_num: ::std::os::raw::c_int,
    pub ctrl_cpu_num: ::std::os::raw::c_int,
    pub data_cpu_num: ::std::os::raw::c_int,
    pub ai_core_num: ::std::os::raw::c_int,
    pub vector_core_num: ::std::os::raw::c_int,
    pub reserve: [::std::os::raw::c_int; 8usize],
}
pub const DCMI_QOS_SUB_INFO_DCMI_QOS_SUB_MATA_CONFIG: DCMI_QOS_SUB_INFO = 0;
pub const DCMI_QOS_SUB_INFO_DCMI_QOS_SUB_MASTER_CONFIG: DCMI_QOS_SUB_INFO = 1;
pub const DCMI_QOS_SUB_INFO_DCMI_QOS_SUB_BW_DATA: DCMI_QOS_SUB_INFO = 2;
pub const DCMI_QOS_SUB_INFO_DCMI_QOS_SUB_GLOBAL_CONFIG: DCMI_QOS_SUB_INFO = 3;
pub const DCMI_QOS_SUB_INFO_DCMI_QOS_SUB_CONFIG_DONE: DCMI_QOS_SUB_INFO = 4;
pub type DCMI_QOS_SUB_INFO = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_qos_bw_config {
    pub mode: ::std::os::raw::c_uchar,
    pub state: ::std::os::raw::c_uchar,
    pub cnt: ::std::os::raw::c_uchar,
    pub method: ::std::os::raw::c_uchar,
    pub interval: ::std::os::raw::c_uint,
    pub target_set: [::std::os::raw::c_uint; 16usize],
    pub reserved_1: [::std::os::raw::c_int; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_qos_bw_result {
    pub mpamid: ::std::os::raw::c_int,
    pub curr: ::std::os::raw::c_uint,
    pub bw_max: ::std::os::raw::c_uint,
    pub bw_min: ::std::os::raw::c_uint,
    pub bw_mean: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_int; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_qos_mata_config {
    pub mpamid: ::std::os::raw::c_int,
    pub bw_high: ::std::os::raw::c_uint,
    pub bw_low: ::std::os::raw::c_uint,
    pub hardlimit: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_qos_master_config {
    pub master: ::std::os::raw::c_int,
    pub mpamid: ::std::os::raw::c_int,
    pub qos: ::std::os::raw::c_int,
    pub pmg: ::std::os::raw::c_int,
    pub bitmap: [::std::os::raw::c_ulonglong; 4usize],
    pub reserved: [::std::os::raw::c_int; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_qos_gbl_config {
    pub enable: ::std::os::raw::c_uint,
    pub autoqos_fuse_en: ::std::os::raw::c_uint,
    pub mpamqos_fuse_mode: ::std::os::raw::c_uint,
    pub mpam_subtype: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_int; 8usize],
}
pub const DCMI_CHIP_INFO_SUB_CMD_DCMI_CHIP_INF_SUB_CMD_CHIP_ID: DCMI_CHIP_INFO_SUB_CMD = 0;
pub const DCMI_CHIP_INFO_SUB_CMD_DCMI_CHIP_INF_SUB_CMD_SPOD_INFO: DCMI_CHIP_INFO_SUB_CMD = 1;
pub const DCMI_CHIP_INFO_SUB_CMD_DCMI_CHIP_INF_SUB_CMD_MAX: DCMI_CHIP_INFO_SUB_CMD = 255;
pub type DCMI_CHIP_INFO_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_spod_info {
    pub sdid: ::std::os::raw::c_uint,
    pub super_pod_size: ::std::os::raw::c_uint,
    pub super_pod_id: ::std::os::raw::c_uint,
    pub server_index: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uint; 8usize],
}
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_AICORE_UTILIZATION_RATE: DCMI_TS_SUB_CMD = 0;
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_VECTORCORE_UTILIZATION_RATE: DCMI_TS_SUB_CMD = 1;
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_FFTS_TYPE: DCMI_TS_SUB_CMD = 2;
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_SET_FAULT_MASK: DCMI_TS_SUB_CMD = 3;
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_GET_FAULT_MASK: DCMI_TS_SUB_CMD = 4;
pub const DCMI_TS_SUB_CMD_DCMI_TS_SUB_CMD_MAX: DCMI_TS_SUB_CMD = 5;
pub type DCMI_TS_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_RECOVERY_SUB_CMD_DCMI_RCVR_SUB_CMD_SET_FLAG: DCMI_RECOVERY_SUB_CMD = 0;
pub const DCMI_RECOVERY_SUB_CMD_DCMI_RCVR_SUB_CMD_GET_FLAG: DCMI_RECOVERY_SUB_CMD = 1;
pub const DCMI_RECOVERY_SUB_CMD_DCMI_RCVR_SUB_CMD_CLEAN_FLAG: DCMI_RECOVERY_SUB_CMD = 2;
pub const DCMI_RECOVERY_SUB_CMD_DCMI_RCVR_SUB_CMD_RESET_BOOT_CNT: DCMI_RECOVERY_SUB_CMD = 3;
pub const DCMI_RECOVERY_SUB_CMD_DCMI_RCVR_SUB_CMD_SET_STATUS: DCMI_RECOVERY_SUB_CMD = 4;
pub type DCMI_RECOVERY_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_SUB_OS_TYPE_DCMI_SUB_OS_SD: DCMI_SUB_OS_TYPE = 0;
pub const DCMI_SUB_OS_TYPE_DCMI_SUB_OS_ALL: DCMI_SUB_OS_TYPE = 254;
pub const DCMI_SUB_OS_TYPE_DCMI_SUB_OS_INVALID: DCMI_SUB_OS_TYPE = 255;
pub type DCMI_SUB_OS_TYPE = ::std::os::raw::c_uint;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_CONFIG: DCMI_UFS_SUB_CMD = 0;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_STATUS: DCMI_UFS_SUB_CMD = 1;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_INLINE_CRYPTO: DCMI_UFS_SUB_CMD = 2;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_CREATE_KEY: DCMI_UFS_SUB_CMD = 3;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_DELETE_KEY: DCMI_UFS_SUB_CMD = 4;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_QUERY_DESCRIPTOR: DCMI_UFS_SUB_CMD = 5;
pub const DCMI_UFS_SUB_CMD_DCMI_UFS_SUB_CMD_INVALID: DCMI_UFS_SUB_CMD = 255;
pub type DCMI_UFS_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_UFS_PWR_MODE_DCMI_UFS_FAST_MODE: DCMI_UFS_PWR_MODE = 1;
pub const DCMI_UFS_PWR_MODE_DCMI_UFS_SLOW_MODE: DCMI_UFS_PWR_MODE = 2;
pub const DCMI_UFS_PWR_MODE_DCMI_UFS_FASTAUTO_MODE: DCMI_UFS_PWR_MODE = 4;
pub const DCMI_UFS_PWR_MODE_DCMI_UFS_SLOWAUTO_MODE: DCMI_UFS_PWR_MODE = 5;
pub const DCMI_UFS_PWR_MODE_DCMI_UFS_UNCHANGED: DCMI_UFS_PWR_MODE = 7;
pub type DCMI_UFS_PWR_MODE = ::std::os::raw::c_uint;
pub const DCMI_UFS_GEAR_DCMI_UFS_DONT_CHANGE: DCMI_UFS_GEAR = 0;
pub const DCMI_UFS_GEAR_DCMI_UFS_GEAR_1: DCMI_UFS_GEAR = 1;
pub const DCMI_UFS_GEAR_DCMI_UFS_GEAR_2: DCMI_UFS_GEAR = 2;
pub const DCMI_UFS_GEAR_DCMI_UFS_GEAR_3: DCMI_UFS_GEAR = 3;
pub type DCMI_UFS_GEAR = ::std::os::raw::c_uint;
pub const DCMI_UFS_HS_MODE_DCMI_UFS_PA_HS_MODE_A: DCMI_UFS_HS_MODE = 1;
pub const DCMI_UFS_HS_MODE_DCMI_UFS_PA_HS_MODE_B: DCMI_UFS_HS_MODE = 2;
pub type DCMI_UFS_HS_MODE = ::std::os::raw::c_uint;
#[doc = "< UFS_ACTIVE_PWR_MODE, UIC_LINK_ACTIVE_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_0: DCMI_UFS_PM_LEVEL = 0;
#[doc = "< UFS_ACTIVE_PWR_MODE, UIC_LINK_HIBERN8_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_1: DCMI_UFS_PM_LEVEL = 1;
#[doc = "< UFS_SLEEP_PWR_MODE, UIC_LINK_ACTIVE_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_2: DCMI_UFS_PM_LEVEL = 2;
#[doc = "< UFS_SLEEP_PWR_MODE, UIC_LINK_HIBERN8_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_3: DCMI_UFS_PM_LEVEL = 3;
#[doc = "< UFS_POWERDOWN_PWR_MODE, UIC_LINK_HIBERN8_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_4: DCMI_UFS_PM_LEVEL = 4;
#[doc = "< UFS_POWERDOWN_PWR_MODE, UIC_LINK_OFF_STATE"]
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_5: DCMI_UFS_PM_LEVEL = 5;
pub const DCMI_UFS_PM_LEVEL_DCMI_UFS_PM_LEVEL_MAX: DCMI_UFS_PM_LEVEL = 6;
pub type DCMI_UFS_PM_LEVEL = ::std::os::raw::c_uint;
pub const DCMI_UFS_DEV_CLOCK_DCMI_UFS_DEV_CLK_19M2: DCMI_UFS_DEV_CLOCK = 0;
pub const DCMI_UFS_DEV_CLOCK_DCMI_UFS_DEV_CLK_26M0: DCMI_UFS_DEV_CLOCK = 1;
pub const DCMI_UFS_DEV_CLOCK_DCMI_UFS_DEV_CLK_38M4: DCMI_UFS_DEV_CLOCK = 2;
pub const DCMI_UFS_DEV_CLOCK_DCMI_UFS_DEV_CLK_52M0: DCMI_UFS_DEV_CLOCK = 3;
pub const DCMI_UFS_DEV_CLOCK_DCMI_UFS_DEV_CLK_INVAL: DCMI_UFS_DEV_CLOCK = 4;
pub type DCMI_UFS_DEV_CLOCK = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_config_stru {
    #[doc = "< Link Rate Mode"]
    pub pwr_mode: DCMI_UFS_PWR_MODE,
    #[doc = "< Link Rate"]
    pub pwr_gear: DCMI_UFS_GEAR,
    #[doc = "< HS Series, Only query, not configuration"]
    pub hs_series: DCMI_UFS_HS_MODE,
    #[doc = "< HS Series, Only query, not configuration"]
    pub suspend_pwr_level: DCMI_UFS_PM_LEVEL,
    #[doc = "< enable autoH8: 0-disable, 1-enable"]
    pub auto_h8: ::std::os::raw::c_uint,
    #[doc = "< active lanes count"]
    pub lane_count: ::std::os::raw::c_uint,
    #[doc = "< Reference Clock Frequency value, Only query, not configuration"]
    pub device_refclk: DCMI_UFS_DEV_CLOCK,
}
pub type DCMI_UFS_CONFIG_STRU = dcmi_ufs_config_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_partition_stru {
    pub lun: ::std::os::raw::c_uint,
    pub lba_start: ::std::os::raw::c_uint,
    pub lba_end: ::std::os::raw::c_uint,
    pub crypto_key_index: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 4usize],
}
pub type DCMI_UFS_PARTITION_STRU = dcmi_ufs_partition_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_inline_crypto_stru {
    pub enable: ::std::os::raw::c_uint,
    pub partition: [DCMI_UFS_PARTITION_STRU; 8usize],
    pub partition_cnt: ::std::os::raw::c_uint,
}
pub type DCMI_UFS_INLINE_CRYPTO_STRU = dcmi_ufs_inline_crypto_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_key_index_stru {
    pub key_index: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 4usize],
}
pub type DCMI_UFS_KEY_INDEX_STRU = dcmi_ufs_key_index_stru;
pub const DCMI_UFS_STATE_DCMI_UFS_STATE_LINKOFF: DCMI_UFS_STATE = 0;
pub const DCMI_UFS_STATE_DCMI_UFS_STATE_ACTIVE: DCMI_UFS_STATE = 1;
pub const DCMI_UFS_STATE_DCMI_UFS_STATE_HIBERN8: DCMI_UFS_STATE = 2;
pub type DCMI_UFS_STATE = ::std::os::raw::c_uint;
#[doc = "< Link powered down or disabled"]
pub const DCMI_UFS_LINK_STATE_DCMI_UFS_UIC_LINK_OFF_STATE: DCMI_UFS_LINK_STATE = 0;
#[doc = "< Link is in Fast/Slow/Sleep state"]
pub const DCMI_UFS_LINK_STATE_DCMI_UFS_UIC_LINK_ACTIVE_STATE: DCMI_UFS_LINK_STATE = 1;
#[doc = "< Link is in Hibernate state"]
pub const DCMI_UFS_LINK_STATE_DCMI_UFS_UIC_LINK_HIBERN8_STATE: DCMI_UFS_LINK_STATE = 2;
pub type DCMI_UFS_LINK_STATE = ::std::os::raw::c_uint;
pub const DCMI_UFS_DEV_PWR_STATE_DCMI_UFS_DEV_PWR_ACTIVE: DCMI_UFS_DEV_PWR_STATE = 1;
pub const DCMI_UFS_DEV_PWR_STATE_DCMI_UFS_DEV_PWR_SLEEP: DCMI_UFS_DEV_PWR_STATE = 2;
pub const DCMI_UFS_DEV_PWR_STATE_DCMI_UFS_DEV_PWR_POWERDOWN: DCMI_UFS_DEV_PWR_STATE = 3;
pub type DCMI_UFS_DEV_PWR_STATE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_descriptor_stru {
    pub automotive_health: [::std::os::raw::c_uchar; 255usize],
    pub device_health: [::std::os::raw::c_uchar; 255usize],
    pub device: [::std::os::raw::c_uchar; 255usize],
    pub osv_report: [::std::os::raw::c_uchar; 255usize],
    pub nand_info_report: [::std::os::raw::c_uchar; 255usize],
    pub reserved: [::std::os::raw::c_uchar; 255usize],
}
pub type DCMI_UFS_DESCRIPTOR_STRU = dcmi_ufs_descriptor_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ufs_status_stru {
    #[doc = "< ufs status"]
    pub status: DCMI_UFS_STATE,
    #[doc = "< rx rate mode"]
    pub rx_pwr_mode: DCMI_UFS_PWR_MODE,
    #[doc = "< tx rate mode"]
    pub tx_pwr_mode: DCMI_UFS_PWR_MODE,
    #[doc = "< rx rate"]
    pub rx_pwr_gear: DCMI_UFS_GEAR,
    #[doc = "< tx rate"]
    pub tx_pwr_gear: DCMI_UFS_GEAR,
    #[doc = "< rx lanes"]
    pub rx_lanes: ::std::os::raw::c_uint,
    #[doc = "< tx lanes"]
    pub tx_lanes: ::std::os::raw::c_uint,
    #[doc = "< link power status"]
    pub link_pwr_status: DCMI_UFS_LINK_STATE,
    #[doc = "< device power status"]
    pub device_pwr_status: DCMI_UFS_DEV_PWR_STATE,
    #[doc = "< ufs device temperature"]
    pub temperature: ::std::os::raw::c_int,
    #[doc = "< ufs device exception status"]
    pub fault_status: ::std::os::raw::c_uint,
    #[doc = "< total raw device capacity"]
    pub total_capacity: ::std::os::raw::c_uint,
    #[doc = "< ufs device sub class"]
    pub model_number: ::std::os::raw::c_uint,
    #[doc = "< ufs device life time used"]
    pub device_life_time: ::std::os::raw::c_uint,
    #[doc = "< product revision level"]
    pub fw_ver: ::std::os::raw::c_uint,
    #[doc = "< whether to support firmware update: 0-not support, 1-support"]
    pub fw_update_enable: ::std::os::raw::c_uint,
    #[doc = "< ufs device product identification"]
    pub product_name: [::std::os::raw::c_uchar; 34usize],
    pub manufacturer_name: [::std::os::raw::c_uchar; 18usize],
    #[doc = " <ufs device manufacturer name"]
    pub serial_number: [::std::os::raw::c_uchar; 254usize],
    #[doc = "< ufs device specification version"]
    pub spec_version: ::std::os::raw::c_uint,
    #[doc = "< ufs device device version"]
    pub device_version: ::std::os::raw::c_uint,
}
pub type DCMI_UFS_STATUS_STRU = dcmi_ufs_status_stru;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_GET_VDEV_RESOURCE: DCMI_VDEV_MNG_SUB_CMD = 0;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_GET_TOTAL_RESOURCE: DCMI_VDEV_MNG_SUB_CMD = 1;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_GET_FREE_RESOURCE: DCMI_VDEV_MNG_SUB_CMD = 2;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_SET_SRIOV_SWITCH: DCMI_VDEV_MNG_SUB_CMD = 3;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_GET_VDEV_ACTIVITY: DCMI_VDEV_MNG_SUB_CMD = 5;
pub const DCMI_VDEV_MNG_SUB_CMD_DCMI_VMNG_SUB_CMD_MAX: DCMI_VDEV_MNG_SUB_CMD = 6;
pub type DCMI_VDEV_MNG_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_AICORE_VOLTAGE_CURRENT: DCMI_LP_SUB_CMD = 0;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_HYBIRD_VOLTAGE_CURRENT: DCMI_LP_SUB_CMD = 1;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_TAISHAN_VOLTAGE_CURRENT: DCMI_LP_SUB_CMD = 2;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_DDR_VOLTAGE_CURRENT: DCMI_LP_SUB_CMD = 3;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_ACG: DCMI_LP_SUB_CMD = 4;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_STATUS: DCMI_LP_SUB_CMD = 5;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_TOPS_DETAILS: DCMI_LP_SUB_CMD = 6;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_SET_WORK_TOPS: DCMI_LP_SUB_CMD = 7;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_GET_WORK_TOPS: DCMI_LP_SUB_CMD = 8;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_AICORE_FREQREDUC_CAUSE: DCMI_LP_SUB_CMD = 9;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_GET_POWER_INFO: DCMI_LP_SUB_CMD = 10;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_SET_IDLE_SWITCH: DCMI_LP_SUB_CMD = 11;
pub const DCMI_LP_SUB_CMD_DCMI_LP_SUB_CMD_MAX: DCMI_LP_SUB_CMD = 12;
pub type DCMI_LP_SUB_CMD = ::std::os::raw::c_uint;
pub const DCMI_EX_CERT_SUB_CMD_DCMI_CERT_SUB_CMD_INIT_TLS_PUB_KEY: DCMI_EX_CERT_SUB_CMD = 0;
pub const DCMI_EX_CERT_SUB_CMD_DCMI_CERT_SUB_CMD_INIT_RESERVE: DCMI_EX_CERT_SUB_CMD = 1;
pub const DCMI_EX_CERT_SUB_CMD_DCMI_CERT_SUB_CMD_TLS_CERT_INFO: DCMI_EX_CERT_SUB_CMD = 2;
pub const DCMI_EX_CERT_SUB_CMD_DCMI_CERT_SUB_CMD_MAX: DCMI_EX_CERT_SUB_CMD = 3;
pub type DCMI_EX_CERT_SUB_CMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_lp_cur_tops_stru {
    pub work_tops: ::std::os::raw::c_uint,
    pub tops_nums: ::std::os::raw::c_uint,
}
pub type DCMI_LP_CUR_TOPS_STRU = dcmi_lp_cur_tops_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_lp_work_tops_stru {
    pub work_tops: ::std::os::raw::c_uint,
    pub is_in_flash: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uchar; 32usize],
}
pub type DCMI_LP_WORK_TOPS_STRU = dcmi_lp_work_tops_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_lp_each_tops_details {
    pub work_tops: ::std::os::raw::c_uint,
    pub aic_tops: ::std::os::raw::c_uint,
    pub aic_freq: ::std::os::raw::c_uint,
    pub aic_vol: ::std::os::raw::c_uint,
    pub cpu_freq: ::std::os::raw::c_uint,
    pub cpu_vol: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_lp_tops_details_stru {
    pub tops_nums: ::std::os::raw::c_uint,
    pub each_work_tops: [dcmi_lp_each_tops_details; 10usize],
}
pub type DCMI_LP_TOPS_DETAILS_STRU = dcmi_lp_tops_details_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_lp_power_info {
    pub soc_rated_power: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
pub type DCMI_LP_POWER_INFO_STRU = dcmi_lp_power_info;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_NVE: dcmi_component_type = 0;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_XLOADER: dcmi_component_type = 1;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_M3FW: dcmi_component_type = 2;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_UEFI: dcmi_component_type = 3;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_TEE: dcmi_component_type = 4;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_KERNEL: dcmi_component_type = 5;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_DTB: dcmi_component_type = 6;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_ROOTFS: dcmi_component_type = 7;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_IMU: dcmi_component_type = 8;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_IMP: dcmi_component_type = 9;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_AICPU: dcmi_component_type = 10;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HBOOT1_A: dcmi_component_type = 11;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HBOOT1_B: dcmi_component_type = 12;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HBOOT2: dcmi_component_type = 13;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_DDR: dcmi_component_type = 14;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_LP: dcmi_component_type = 15;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HSM: dcmi_component_type = 16;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_SAFETY_ISLAND: dcmi_component_type = 17;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HILINK: dcmi_component_type = 18;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_RAWDATA: dcmi_component_type = 19;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_SYSDRV: dcmi_component_type = 20;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_ADSAPP: dcmi_component_type = 21;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_COMISOLATOR: dcmi_component_type = 22;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_CLUSTER: dcmi_component_type = 23;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_CUSTOMIZED: dcmi_component_type = 24;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_SYS_BASE_CONFIG: dcmi_component_type = 25;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_RECOVERY: dcmi_component_type = 26;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_HILINK2: dcmi_component_type = 27;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_LOGIC_BIST: dcmi_component_type = 28;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_MEMORY_BIST: dcmi_component_type = 29;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_ATF: dcmi_component_type = 30;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_USER_BASE_CONFIG: dcmi_component_type = 31;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_BOOTROM: dcmi_component_type = 32;
pub const dcmi_component_type_DCMI_COMPONENT_TYPE_MAX: dcmi_component_type = 33;
pub const dcmi_component_type_DCMI_UPGRADE_AND_RESET_ALL_COMPONENT: dcmi_component_type =
    4294967287;
pub const dcmi_component_type_DCMI_UPGRADE_ALL_IMAGE_COMPONENT: dcmi_component_type = 4294967293;
pub const dcmi_component_type_DCMI_UPGRADE_ALL_FIRMWARE_COMPONENT: dcmi_component_type = 4294967294;
pub const dcmi_component_type_DCMI_UPGRADE_ALL_COMPONENT: dcmi_component_type = 4294967295;
pub type dcmi_component_type = ::std::os::raw::c_uint;
pub const dcmi_upgrade_state_DCMI_UPGRADE_IDLE: dcmi_upgrade_state = 0;
pub const dcmi_upgrade_state_DCMI_UPGRADE_UPGRADING: dcmi_upgrade_state = 1;
pub const dcmi_upgrade_state_DCMI_UPGRADE_NOT_SUPPORT: dcmi_upgrade_state = 2;
pub const dcmi_upgrade_state_DCMI_UPGRADE_UPGRADE_FAIL: dcmi_upgrade_state = 3;
pub const dcmi_upgrade_state_DCMI_UPGRADE_NOT_NEED: dcmi_upgrade_state = 4;
pub const dcmi_upgrade_state_DCMI_UPGRADE_NEED_VALIDATE: dcmi_upgrade_state = 5;
pub const dcmi_upgrade_state_DCMI_UPGRADE_STATE_NONE: dcmi_upgrade_state = 6;
pub type dcmi_upgrade_state = ::std::os::raw::c_uint;
pub const dcmi_upgrade_type_MCU_UPGRADE_START: dcmi_upgrade_type = 1;
pub const dcmi_upgrade_type_MCU_UPGRADE_VALIDETE: dcmi_upgrade_type = 3;
pub const dcmi_upgrade_type_VRD_UPGRADE_START: dcmi_upgrade_type = 11;
pub const dcmi_upgrade_type_MCU_UPGRADE_NONE: dcmi_upgrade_type = 12;
pub type dcmi_upgrade_type = ::std::os::raw::c_uint;
pub const dcmi_boot_status_DCMI_BOOT_STATUS_UNINIT: dcmi_boot_status = 0;
pub const dcmi_boot_status_DCMI_BOOT_STATUS_BIOS: dcmi_boot_status = 1;
pub const dcmi_boot_status_DCMI_BOOT_STATUS_OS: dcmi_boot_status = 2;
pub const dcmi_boot_status_DCMI_BOOT_STATUS_FINISH: dcmi_boot_status = 3;
pub const dcmi_boot_status_DCMI_SYSTEM_START_FINISH: dcmi_boot_status = 16;
pub type dcmi_boot_status = ::std::os::raw::c_uint;
pub const dcmi_device_type_DCMI_DEVICE_TYPE_DDR: dcmi_device_type = 0;
pub const dcmi_device_type_DCMI_DEVICE_TYPE_SRAM: dcmi_device_type = 1;
pub const dcmi_device_type_DCMI_DEVICE_TYPE_HBM: dcmi_device_type = 2;
pub const dcmi_device_type_DCMI_DEVICE_TYPE_NPU: dcmi_device_type = 3;
pub const dcmi_device_type_DCMI_HBM_RECORDED_SINGLE_ADDR: dcmi_device_type = 4;
pub const dcmi_device_type_DCMI_HBM_RECORDED_MULTI_ADDR: dcmi_device_type = 5;
pub const dcmi_device_type_DCMI_DEVICE_TYPE_NONE: dcmi_device_type = 255;
pub type dcmi_device_type = ::std::os::raw::c_uint;
pub const dcmi_freq_type_DCMI_FREQ_DDR: dcmi_freq_type = 1;
pub const dcmi_freq_type_DCMI_FREQ_CTRLCPU: dcmi_freq_type = 2;
pub const dcmi_freq_type_DCMI_FREQ_HBM: dcmi_freq_type = 6;
pub const dcmi_freq_type_DCMI_FREQ_AICORE_CURRENT_: dcmi_freq_type = 7;
pub const dcmi_freq_type_DCMI_FREQ_AICORE_MAX: dcmi_freq_type = 9;
pub const dcmi_freq_type_DCMI_FREQ_VECTORCORE_CURRENT: dcmi_freq_type = 12;
pub type dcmi_freq_type = ::std::os::raw::c_uint;
pub const dcmi_manager_sensor_id_DCMI_CLUSTER_TEMP_ID: dcmi_manager_sensor_id = 0;
pub const dcmi_manager_sensor_id_DCMI_PERI_TEMP_ID: dcmi_manager_sensor_id = 1;
pub const dcmi_manager_sensor_id_DCMI_AICORE0_TEMP_ID: dcmi_manager_sensor_id = 2;
pub const dcmi_manager_sensor_id_DCMI_AICORE1_TEMP_ID: dcmi_manager_sensor_id = 3;
pub const dcmi_manager_sensor_id_DCMI_AICORE_LIMIT_ID: dcmi_manager_sensor_id = 4;
pub const dcmi_manager_sensor_id_DCMI_AICORE_TOTAL_PER_ID: dcmi_manager_sensor_id = 5;
pub const dcmi_manager_sensor_id_DCMI_AICORE_ELIM_PER_ID: dcmi_manager_sensor_id = 6;
pub const dcmi_manager_sensor_id_DCMI_AICORE_BASE_FREQ_ID: dcmi_manager_sensor_id = 7;
pub const dcmi_manager_sensor_id_DCMI_NPU_DDR_FREQ_ID: dcmi_manager_sensor_id = 8;
pub const dcmi_manager_sensor_id_DCMI_THERMAL_THRESHOLD_ID: dcmi_manager_sensor_id = 9;
pub const dcmi_manager_sensor_id_DCMI_NTC_TEMP_ID: dcmi_manager_sensor_id = 10;
pub const dcmi_manager_sensor_id_DCMI_SOC_TEMP_ID: dcmi_manager_sensor_id = 11;
pub const dcmi_manager_sensor_id_DCMI_FP_TEMP_ID: dcmi_manager_sensor_id = 12;
pub const dcmi_manager_sensor_id_DCMI_N_DIE_TEMP_ID: dcmi_manager_sensor_id = 13;
pub const dcmi_manager_sensor_id_DCMI_HBM_TEMP_ID: dcmi_manager_sensor_id = 14;
pub const dcmi_manager_sensor_id_DCMI_SENSOR_INVALID_ID: dcmi_manager_sensor_id = 255;
pub type dcmi_manager_sensor_id = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union dcmi_sensor_info {
    pub uchar: ::std::os::raw::c_uchar,
    pub ushort: ::std::os::raw::c_ushort,
    pub uint: ::std::os::raw::c_uint,
    pub iint: ::std::os::raw::c_int,
    pub temp: [::std::os::raw::c_schar; 2usize],
    pub ntc_tmp: [::std::os::raw::c_int; 4usize],
    pub data: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_event_filter {
    pub filter_flag: ::std::os::raw::c_ulonglong,
    pub event_id: ::std::os::raw::c_uint,
    pub severity: ::std::os::raw::c_uchar,
    pub node_type: ::std::os::raw::c_uchar,
    #[doc = "< reserve 32byte"]
    pub resv: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_dms_fault_event {
    pub event_id: ::std::os::raw::c_uint,
    pub deviceid: ::std::os::raw::c_ushort,
    pub node_type: ::std::os::raw::c_uchar,
    pub node_id: ::std::os::raw::c_uchar,
    pub sub_node_type: ::std::os::raw::c_uchar,
    pub sub_node_id: ::std::os::raw::c_uchar,
    pub severity: ::std::os::raw::c_uchar,
    pub assertion: ::std::os::raw::c_uchar,
    pub event_serial_num: ::std::os::raw::c_int,
    pub notify_serial_num: ::std::os::raw::c_int,
    pub alarm_raised_time: ::std::os::raw::c_ulonglong,
    pub event_name: [::std::os::raw::c_char; 256usize],
    pub additional_info: [::std::os::raw::c_char; 32usize],
    pub os_id: ::std::os::raw::c_uchar,
    #[doc = "< os_id occupy 1 byte, reserve 31byte"]
    pub resv: [::std::os::raw::c_uchar; 31usize],
}
pub const dcmi_event_type_DCMI_DMS_FAULT_EVENT: dcmi_event_type = 0;
pub const dcmi_event_type_DCMI_EVENT_TYPE_MAX: dcmi_event_type = 1;
pub type dcmi_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dcmi_event {
    pub type_: dcmi_event_type,
    pub event_t: dcmi_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dcmi_event__bindgen_ty_1 {
    pub dms_event: dcmi_dms_fault_event,
}
pub type dcmi_fault_event_callback =
    ::std::option::Option<unsafe extern "C" fn(event: *mut dcmi_event)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_csr_info {
    pub country_name: [::std::os::raw::c_char; 16usize],
    pub province_name: [::std::os::raw::c_char; 16usize],
    pub city_name: [::std::os::raw::c_char; 16usize],
    pub organization_name: [::std::os::raw::c_char; 16usize],
    pub department_name: [::std::os::raw::c_char; 16usize],
    pub reserve_name: [::std::os::raw::c_char; 64usize],
    pub reserve: ::std::os::raw::c_int,
    pub csr_len: ::std::os::raw::c_int,
    pub csr_data: [::std::os::raw::c_char; 2048usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_cert_info {
    pub alarm_stat: ::std::os::raw::c_uint,
    pub reserve: ::std::os::raw::c_uint,
    pub start_time: [::std::os::raw::c_char; 32usize],
    pub end_time: [::std::os::raw::c_char; 32usize],
    pub country_name: [::std::os::raw::c_char; 16usize],
    pub province_name: [::std::os::raw::c_char; 16usize],
    pub city_name: [::std::os::raw::c_char; 16usize],
    pub organization_name: [::std::os::raw::c_char; 16usize],
    pub department_name: [::std::os::raw::c_char; 16usize],
    pub reserve_name: [::std::os::raw::c_char; 64usize],
    pub common_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct dcmi_certs_chain_data {
    pub count: ::std::os::raw::c_uint,
    pub data_len: [::std::os::raw::c_uint; 15usize],
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_base_resource {
    pub token: ::std::os::raw::c_ulonglong,
    pub token_max: ::std::os::raw::c_ulonglong,
    pub task_timeout: ::std::os::raw::c_ulonglong,
    pub vfg_id: ::std::os::raw::c_uint,
    pub vip_mode: ::std::os::raw::c_uchar,
    pub reserved: [::std::os::raw::c_uchar; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_computing_resource {
    pub aic: f32,
    pub aiv: f32,
    pub dsa: ::std::os::raw::c_ushort,
    pub rtsq: ::std::os::raw::c_ushort,
    pub acsq: ::std::os::raw::c_ushort,
    pub cdqm: ::std::os::raw::c_ushort,
    pub c_core: ::std::os::raw::c_ushort,
    pub ffts: ::std::os::raw::c_ushort,
    pub sdma: ::std::os::raw::c_ushort,
    pub pcie_dma: ::std::os::raw::c_ushort,
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub event_id: ::std::os::raw::c_uint,
    pub notify_id: ::std::os::raw::c_uint,
    pub stream_id: ::std::os::raw::c_uint,
    pub model_id: ::std::os::raw::c_uint,
    pub topic_schedule_aicpu: ::std::os::raw::c_ushort,
    pub host_ctrl_cpu: ::std::os::raw::c_ushort,
    pub host_aicpu: ::std::os::raw::c_ushort,
    pub device_aicpu: ::std::os::raw::c_ushort,
    pub topic_ctrl_cpu_slot: ::std::os::raw::c_ushort,
    pub vdev_aicore_utilization: ::std::os::raw::c_uint,
    pub vdev_memory_total: ::std::os::raw::c_ulonglong,
    pub vdev_memory_free: ::std::os::raw::c_ulonglong,
    pub reserved: [::std::os::raw::c_uchar; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_computing_configurable {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub aic: f32,
    pub aiv: f32,
    pub dsa: ::std::os::raw::c_ushort,
    pub rtsq: ::std::os::raw::c_ushort,
    pub cdqm: ::std::os::raw::c_ushort,
    pub topic_schedule_aicpu: ::std::os::raw::c_ushort,
    pub host_ctrl_cpu: ::std::os::raw::c_ushort,
    pub host_aicpu: ::std::os::raw::c_ushort,
    pub device_aicpu: ::std::os::raw::c_ushort,
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_media_resource {
    pub jpegd: f32,
    pub jpege: f32,
    pub vpc: f32,
    pub vdec: f32,
    pub pngd: f32,
    pub venc: f32,
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_create_vdev_in {
    pub name: [::std::os::raw::c_char; 16usize],
    pub base: dcmi_base_resource,
    pub computing: dcmi_computing_configurable,
    pub media: dcmi_media_resource,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_create_vdev_out {
    pub vdev_id: ::std::os::raw::c_uint,
    pub pcie_bus: ::std::os::raw::c_uint,
    pub pcie_device: ::std::os::raw::c_uint,
    pub pcie_func: ::std::os::raw::c_uint,
    pub vfg_id: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_create_vdev_res_stru {
    pub vdev_id: ::std::os::raw::c_uint,
    pub vfg_id: ::std::os::raw::c_uint,
    pub template_name: [::std::os::raw::c_char; 32usize],
    pub reserved: [::std::os::raw::c_uchar; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_vdev_query_info {
    pub name: [::std::os::raw::c_char; 16usize],
    pub status: ::std::os::raw::c_uint,
    pub is_container_used: ::std::os::raw::c_uint,
    pub vfid: ::std::os::raw::c_uint,
    pub vfg_id: ::std::os::raw::c_uint,
    pub container_id: ::std::os::raw::c_ulonglong,
    pub base: dcmi_base_resource,
    pub computing: dcmi_computing_resource,
    pub media: dcmi_media_resource,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_vdev_query_stru {
    pub vdev_id: ::std::os::raw::c_uint,
    pub query_info: dcmi_vdev_query_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_soc_free_resource {
    pub vfg_num: ::std::os::raw::c_uint,
    pub vfg_bitmap: ::std::os::raw::c_uint,
    pub base: dcmi_base_resource,
    pub computing: dcmi_computing_resource,
    pub media: dcmi_media_resource,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_soc_total_resource {
    pub vdev_num: ::std::os::raw::c_uint,
    pub vdev_id: [::std::os::raw::c_uint; 32usize],
    pub vfg_num: ::std::os::raw::c_uint,
    pub vfg_bitmap: ::std::os::raw::c_uint,
    pub base: dcmi_base_resource,
    pub computing: dcmi_computing_resource,
    pub media: dcmi_media_resource,
}
pub const DCMI_POWER_STATE_DCMI_POWER_STATE_SUSPEND: DCMI_POWER_STATE = 0;
pub const DCMI_POWER_STATE_DCMI_POWER_STATE_POWEROFF: DCMI_POWER_STATE = 1;
pub const DCMI_POWER_STATE_DCMI_POWER_STATE_RESET: DCMI_POWER_STATE = 2;
pub const DCMI_POWER_STATE_DCMI_POWER_STATE_BIST: DCMI_POWER_STATE = 3;
pub const DCMI_POWER_STATE_DCMI_POWER_STATE_MAX: DCMI_POWER_STATE = 4;
pub type DCMI_POWER_STATE = ::std::os::raw::c_uint;
pub const DCMI_LP_RESUME_MODE_DCMI_POWER_RESUME_MODE_BUTTON: DCMI_LP_RESUME_MODE = 0;
pub const DCMI_LP_RESUME_MODE_DCMI_POWER_RESUME_MODE_TIME: DCMI_LP_RESUME_MODE = 1;
pub const DCMI_LP_RESUME_MODE_DCMI_POWER_RESUME_MODE_MAX: DCMI_LP_RESUME_MODE = 2;
pub type DCMI_LP_RESUME_MODE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_power_state_info_stru {
    pub type_: DCMI_POWER_STATE,
    pub mode: DCMI_LP_RESUME_MODE,
    pub value: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uint; 8usize],
}
pub const ECC_INFO_READ_MULTI_ECC_TIMES_READ: ECC_INFO_READ = 0;
pub const ECC_INFO_READ_SINGLE_ECC_INFO_READ: ECC_INFO_READ = 1;
pub const ECC_INFO_READ_MULTI_ECC_INFO_READ: ECC_INFO_READ = 2;
pub const ECC_INFO_READ_ECC_ADDRESS_COUNT_READ: ECC_INFO_READ = 3;
pub const ECC_INFO_READ_ECC_MAX_READ_CMD: ECC_INFO_READ = 4;
pub type ECC_INFO_READ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ecc_record_type {
    pub read_type: ECC_INFO_READ,
    pub module_type: dcmi_device_type,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_multi_ecc_time_data {
    pub multi_record_count: ::std::os::raw::c_uint,
    pub multi_ecc_times: [::std::os::raw::c_uint; 64usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ecc_common_data {
    pub physical_addr: ::std::os::raw::c_ulonglong,
    pub stack_pc_id: ::std::os::raw::c_uint,
    pub reg_addr_h: ::std::os::raw::c_uint,
    pub reg_addr_l: ::std::os::raw::c_uint,
    pub ecc_count: ::std::os::raw::c_uint,
    pub timestamp: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_pcie_link_bandwidth_info {
    pub profiling_time: ::std::os::raw::c_int,
    pub tx_p_bw: [::std::os::raw::c_uint; 3usize],
    pub tx_np_bw: [::std::os::raw::c_uint; 3usize],
    pub tx_cpl_bw: [::std::os::raw::c_uint; 3usize],
    pub tx_np_lantency: [::std::os::raw::c_uint; 3usize],
    pub rx_p_bw: [::std::os::raw::c_uint; 3usize],
    pub rx_np_bw: [::std::os::raw::c_uint; 3usize],
    pub rx_cpl_bw: [::std::os::raw::c_uint; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_serdes_quality_base {
    pub snr: ::std::os::raw::c_uint,
    pub heh: ::std::os::raw::c_uint,
    pub bottom: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_serdes_quality_info {
    pub macro_id: ::std::os::raw::c_uint,
    pub reserved1: ::std::os::raw::c_uint,
    pub serdes_quality_info: [dcmi_serdes_quality_base; 8usize],
    pub reserved2: [::std::os::raw::c_uint; 64usize],
}
pub type DCMI_SERDES_QUALITY_INFO = dcmi_serdes_quality_info;
pub const DCMI_TOPO_TYPE_SELF: _bindgen_ty_1 = 0;
pub const DCMI_TOPO_TYPE_SYS: _bindgen_ty_1 = 1;
pub const DCMI_TOPO_TYPE_PHB: _bindgen_ty_1 = 2;
pub const DCMI_TOPO_TYPE_HCCS: _bindgen_ty_1 = 3;
pub const DCMI_TOPO_TYPE_PXB: _bindgen_ty_1 = 4;
pub const DCMI_TOPO_TYPE_PIX: _bindgen_ty_1 = 5;
pub const DCMI_TOPO_TYPE_SIO: _bindgen_ty_1 = 6;
pub const DCMI_TOPO_TYPE_HCCS_SW: _bindgen_ty_1 = 7;
pub const DCMI_TOPO_TYPE_BUTT: _bindgen_ty_1 = 8;
pub const DCMI_TOPO_TYOE_MAX: _bindgen_ty_1 = 9;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_network_rdma_bandwidth_info {
    pub tx_bandwidth: ::std::os::raw::c_uint,
    pub rx_bandwidth: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_network_pkt_stats_info {
    pub mac_tx_mac_pause_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_mac_pause_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri0_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri1_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri2_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri3_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri4_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri5_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri6_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_pfc_pri7_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri0_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri1_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri2_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri3_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri4_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri5_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri6_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_pfc_pri7_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_total_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_total_oct_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_bad_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_tx_bad_oct_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_total_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_total_oct_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_bad_pkt_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_bad_oct_num: ::std::os::raw::c_ulonglong,
    pub mac_rx_fcs_err_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_rx_rc_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_rx_all_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_rx_err_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_tx_rc_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_tx_all_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_tx_err_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_cqe_num: ::std::os::raw::c_ulonglong,
    pub roce_rx_cnp_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_tx_cnp_pkt_num: ::std::os::raw::c_ulonglong,
    pub roce_err_ack_num: ::std::os::raw::c_ulonglong,
    pub roce_err_psn_num: ::std::os::raw::c_ulonglong,
    pub roce_verification_err_num: ::std::os::raw::c_ulonglong,
    pub roce_err_qp_status_num: ::std::os::raw::c_ulonglong,
    pub roce_new_pkt_rty_num: ::std::os::raw::c_ulonglong,
    pub roce_ecn_db_num: ::std::os::raw::c_ulonglong,
    pub nic_tx_all_pkg_num: ::std::os::raw::c_ulonglong,
    pub nic_tx_all_oct_num: ::std::os::raw::c_ulonglong,
    pub nic_rx_all_pkg_num: ::std::os::raw::c_ulonglong,
    pub nic_rx_all_oct_num: ::std::os::raw::c_ulonglong,
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_usec: ::std::os::raw::c_long,
    pub reserved: [::std::os::raw::c_uchar; 64usize],
}
pub const dcmi_ping_result_DCMI_PING_NOT_START: dcmi_ping_result = 0;
pub const dcmi_ping_result_DCMI_PING_SUCCESS: dcmi_ping_result = 1;
pub const dcmi_ping_result_DCMI_SEND_FAILED: dcmi_ping_result = 2;
pub const dcmi_ping_result_DCMI_RECV_TIMEOUT: dcmi_ping_result = 3;
pub const dcmi_ping_result_DCMI_RES_MAX: dcmi_ping_result = 4;
pub type dcmi_ping_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ping_operate_info {
    pub dst_addr: [::std::os::raw::c_char; 16usize],
    pub sdid: ::std::os::raw::c_uint,
    pub packet_size: ::std::os::raw::c_uint,
    pub packet_send_num: ::std::os::raw::c_uint,
    pub packet_interval: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ping_reply_info {
    pub dst_addr: [::std::os::raw::c_char; 16usize],
    pub ret: [dcmi_ping_result; 1000usize],
    pub total_packet_send_num: ::std::os::raw::c_uint,
    pub total_packet_recv_num: ::std::os::raw::c_uint,
    pub start_tv_sec: [::std::os::raw::c_long; 1000usize],
    pub start_tv_usec: [::std::os::raw::c_long; 1000usize],
    pub end_tv_sec: [::std::os::raw::c_long; 1000usize],
    pub end_tv_usec: [::std::os::raw::c_long; 1000usize],
    pub reserved: [::std::os::raw::c_uchar; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_traceroute_info {
    pub max_ttl: ::std::os::raw::c_int,
    pub tos: ::std::os::raw::c_int,
    pub waittime: ::std::os::raw::c_int,
    pub source_port: ::std::os::raw::c_int,
    pub dest_port: ::std::os::raw::c_int,
    pub dest_ip: [::std::os::raw::c_char; 48usize],
    pub ipv6_flag: bool,
    pub reset_flag: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_network_node_info {
    pub mask: ::std::os::raw::c_int,
    pub ip: [::std::os::raw::c_char; 48usize],
    pub snt: ::std::os::raw::c_int,
    pub loss: f64,
    pub last: f64,
    pub avg: f64,
    pub best: f64,
    pub wrst: f64,
    pub stdev: f64,
    pub reserve: [::std::os::raw::c_char; 64usize],
}
unsafe extern "C" {
    pub fn dcmi_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_dcmi_version(
        dcmi_ver: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_driver_version(
        driver_ver: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_list(
        card_num: *mut ::std::os::raw::c_int,
        card_list: *mut ::std::os::raw::c_int,
        list_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_num_in_card(
        card_id: ::std::os::raw::c_int,
        device_num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_id_in_card(
        card_id: ::std::os::raw::c_int,
        device_id_max: *mut ::std::os::raw::c_int,
        mcu_id: *mut ::std::os::raw::c_int,
        cpu_id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_type(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_type: *mut dcmi_unit_type,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_chip_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        chip_info: *mut dcmi_chip_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_pcie_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_info: *mut dcmi_pcie_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_pcie_info_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_info: *mut dcmi_pcie_info_all,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_board_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        board_info: *mut dcmi_board_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_elabel_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        elabel_info: *mut dcmi_elabel_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_power_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        power: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_card_customized_info(
        card_id: ::std::os::raw::c_int,
        info: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_customized_info(
        card_id: ::std::os::raw::c_int,
        info: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_clear_pcie_error(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_pcie_error_cnt(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_err_code_info: *mut dcmi_chip_pcie_err_rate,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_die_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_die_type,
        die_id: *mut dcmi_die_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_health(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        health: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_errorcode_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        error_count: *mut ::std::os::raw::c_int,
        error_code_list: *mut ::std::os::raw::c_uint,
        list_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_errorcode_string(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        error_code: ::std::os::raw::c_uint,
        error_info: *mut ::std::os::raw::c_uchar,
        buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_flash_count(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        flash_count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_flash_info_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        flash_index: ::std::os::raw::c_uint,
        flash_info: *mut dcmi_flash_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_aicore_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        aicore_info: *mut dcmi_aicore_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_aicpu_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        aicpu_info: *mut dcmi_aicpu_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_boot_status(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        boot_status: *mut dcmi_boot_status,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_pre_reset(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_rescan(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_reset(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        channel_type: dcmi_reset_channel,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_mcu_upgrade_status(
        card_id: ::std::os::raw::c_int,
        status: *mut ::std::os::raw::c_int,
        progress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_mcu_version(
        card_id: ::std::os::raw::c_int,
        version: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_mcu_upgrade_stage(
        card_id: ::std::os::raw::c_int,
        input_type: dcmi_upgrade_type,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_mcu_upgrade_file(
        card_id: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_system_time(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        time: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_temperature(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        temperature: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_voltage(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        voltage: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_p2p_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_ecc_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_device_type,
        device_ecc_info: *mut dcmi_ecc_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_clear_ecc_statistics_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_frequency(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_freq_type,
        frequency: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_hbm_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        hbm_info: *mut dcmi_hbm_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_memory_info_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        memory_info: *mut dcmi_memory_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_memory_info_v3(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        memory_info: *mut dcmi_get_memory_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_utilization_rate(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: ::std::os::raw::c_int,
        utilization_rate: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_sensor_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        sensor_id: dcmi_manager_sensor_id,
        sensor_info: *mut dcmi_sensor_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_container_service_enable() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_board_id(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        board_id: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_component_count(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        component_count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_component_list(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        component_table: *mut dcmi_component_type,
        component_count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_component_static_version(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        component_type: dcmi_component_type,
        version_str: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_cgroup_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        cg_info: *mut dcmi_cgroup_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_llc_perf_para(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        perf_para: *mut dcmi_llc_perf,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        main_cmd: dcmi_main_cmd,
        sub_cmd: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_void,
        buf_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        main_cmd: dcmi_main_cmd,
        sub_cmd: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_sec_revocation(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_revo_type,
        file_data: *const ::std::os::raw::c_uchar,
        file_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_mac_count(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_mac(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        mac_id: ::std::os::raw::c_int,
        mac_addr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_mac(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        mac_id: ::std::os::raw::c_int,
        mac_addr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_gateway(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_port_type,
        port_id: ::std::os::raw::c_int,
        gateway: *mut dcmi_ip_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_gateway(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_port_type,
        port_id: ::std::os::raw::c_int,
        gateway: *mut dcmi_ip_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_ip(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_port_type,
        port_id: ::std::os::raw::c_int,
        ip: *mut dcmi_ip_addr,
        mask: *mut dcmi_ip_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_ip(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        input_type: dcmi_port_type,
        port_id: ::std::os::raw::c_int,
        ip: *mut dcmi_ip_addr,
        mask: *mut dcmi_ip_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_network_health(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        result: *mut dcmi_rdfx_detect_result,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_fan_count(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_fan_speed(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        fan_id: ::std::os::raw::c_int,
        speed: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_logic_id(
        device_logic_id: *mut ::std::os::raw::c_int,
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_elabel_v2(
        card_id: ::std::os::raw::c_int,
        elabel_info: *mut dcmi_elabel_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_chip_temperature(
        card_id: ::std::os::raw::c_int,
        data_info: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_ssh_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_share_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_share_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_board_info(
        card_id: ::std::os::raw::c_int,
        board_info: *mut dcmi_board_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_pcie_info(
        card_id: ::std::os::raw::c_int,
        pcie_info: *mut ::std::os::raw::c_char,
        pcie_info_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_pcie_slot(
        card_id: ::std::os::raw::c_int,
        pcie_slot: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_fault_device_num_in_card(
        card_id: ::std::os::raw::c_int,
        device_num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_check_i2c(
        card_id: ::std::os::raw::c_int,
        health_status: *mut ::std::os::raw::c_int,
        buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_user_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        config_name: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_collect_log(
        card_id: ::std::os::raw::c_int,
        log_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_chip_slot(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        chip_pos_id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_product_type(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        product_type_str: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_outband_channel_state(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        channel_state: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_aicpu_count_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        count_info: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_create_vdevice(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        vdev: *mut dcmi_create_vdev_res_stru,
        out: *mut dcmi_create_vdev_out,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_destroy_vdevice(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        vdevid: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_board_id(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        board_id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_first_power_on_date(
        card_id: ::std::os::raw::c_int,
        first_power_on_date: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_fault_event(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        filter: dcmi_event_filter,
        event: *mut dcmi_event,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_subscribe_fault_event(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        filter: dcmi_event_filter,
        handler: dcmi_fault_event_callback,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_resource_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        proc_info: *mut dcmi_proc_mem_info,
        proc_num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_dvpp_ratio_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        usage: *mut dcmi_dvpp_ratio,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_cpu_num_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        buf_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_cpu_num_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        buf_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_phyid_from_logicid(
        logicid: ::std::os::raw::c_uint,
        phyid: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_logicid_from_phyid(
        phyid: ::std::os::raw::c_uint,
        logicid: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_id_device_id_from_logicid(
        card_id: *mut ::std::os::raw::c_int,
        device_id: *mut ::std::os::raw::c_int,
        device_logic_id: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_id_device_id_from_phyid(
        card_id: *mut ::std::os::raw::c_int,
        device_id: *mut ::std::os::raw::c_int,
        device_phy_id: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_vdevice_mode(mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_vdevice_mode(mode: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_vnpu_config_recover_mode(mode: ::std::os::raw::c_uint)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_vnpu_config_recover_mode(
        mode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_driver_health(health: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_driver_errorcode(
        error_count: *mut ::std::os::raw::c_int,
        error_code_list: *mut ::std::os::raw::c_uint,
        list_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_sm_encrypt(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        parm: *mut dcmi_sm_parm,
        data: *mut dcmi_sm_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_sm_decrypt(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        parm: *mut dcmi_sm_parm,
        data: *mut dcmi_sm_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_npu_work_mode(
        card_id: ::std::os::raw::c_int,
        work_mode: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_mainboard_id(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        mainboard_id: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_power_state(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        power_info: dcmi_power_state_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_compatibility(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        compatibility: *mut dcmi_device_compat,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_create_capability_group(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        ts_id: ::std::os::raw::c_int,
        group_info: *mut dcmi_capability_group_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_delete_capability_group(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        ts_id: ::std::os::raw::c_int,
        group_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_capability_group_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        ts_id: ::std::os::raw::c_int,
        group_id: ::std::os::raw::c_int,
        group_info: *mut dcmi_capability_group_info,
        group_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_capability_group_aicore_usage(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        group_id: ::std::os::raw::c_int,
        rate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_multi_ecc_time_info(
        card_id: ::std::os::raw::c_int,
        multi_ecc_time_data: *mut dcmi_multi_ecc_time_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_multi_ecc_record_info(
        card_id: ::std::os::raw::c_int,
        ecc_count: *mut ::std::os::raw::c_uint,
        read_type: ::std::os::raw::c_uchar,
        module_type: ::std::os::raw::c_uchar,
        ecc_common_data_s: *mut dcmi_ecc_common_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_pcie_link_bandwidth_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_link_bandwidth_info: *mut dcmi_pcie_link_bandwidth_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_topo_info_by_device_id(
        card_id1: ::std::os::raw::c_int,
        device_id1: ::std::os::raw::c_int,
        card_id2: ::std::os::raw::c_int,
        device_id2: ::std::os::raw::c_int,
        topo_type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_affinity_cpu_info_by_device_id(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        affinity_cpu: *mut ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_multi_ecc_time_info_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        multi_ecc_time_data: *mut dcmi_multi_ecc_time_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_multi_ecc_record_info_v2(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        type_: dcmi_ecc_record_type,
        ecc_count: *mut ::std::os::raw::c_uint,
        ecc_common_data_s: *mut dcmi_ecc_common_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_serdes_quality_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        macro_id: ::std::os::raw::c_uint,
        serdes_quality_info: *mut dcmi_serdes_quality_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_rdma_bandwidth_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        prof_time: ::std::os::raw::c_uint,
        network_rdma_bandwidth_info: *mut dcmi_network_rdma_bandwidth_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_netdev_pkt_stats_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        network_pkt_stats_info: *mut dcmi_network_pkt_stats_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_ping_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        dcmi_ping: *mut dcmi_ping_operate_info,
        dcmi_reply: *mut dcmi_ping_reply_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_traceroute(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        param_in: dcmi_traceroute_info,
        ret_info: *mut dcmi_network_node_info,
        ret_info_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_tag_pcie_idinfo {
    pub deviceid: ::std::os::raw::c_uint,
    pub venderid: ::std::os::raw::c_uint,
    pub subvenderid: ::std::os::raw::c_uint,
    pub subdeviceid: ::std::os::raw::c_uint,
    pub bdf_deviceid: ::std::os::raw::c_uint,
    pub bdf_busid: ::std::os::raw::c_uint,
    pub bdf_funcid: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_board_info_stru {
    pub board_id: ::std::os::raw::c_uint,
    pub pcb_id: ::std::os::raw::c_uint,
    pub bom_id: ::std::os::raw::c_uint,
    pub slot_id: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_elabel_info_stru {
    pub product_name: [::std::os::raw::c_char; 256usize],
    pub model: [::std::os::raw::c_char; 256usize],
    pub manufacturer: [::std::os::raw::c_char; 256usize],
    pub serial_number: [::std::os::raw::c_char; 256usize],
}
pub type DCMI_ELABEL_INFO_STRU = dcmi_elabel_info_stru;
pub type PDCMI_ELABEL_INFO_STRU = *mut dcmi_elabel_info_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_chip_pcie_err_rate_stru {
    pub reg_deskew_fifo_overflow_intr_status: ::std::os::raw::c_uint,
    pub reg_symbol_unlock_intr_status: ::std::os::raw::c_uint,
    pub reg_deskew_unlock_intr_status: ::std::os::raw::c_uint,
    pub reg_phystatus_timeout_intr_status: ::std::os::raw::c_uint,
    pub symbol_unlock_counter: ::std::os::raw::c_uint,
    pub pcs_rx_err_cnt: ::std::os::raw::c_uint,
    pub phy_lane_err_counter: ::std::os::raw::c_uint,
    pub pcs_rcv_err_status: ::std::os::raw::c_uint,
    pub symbol_unlock_err_status: ::std::os::raw::c_uint,
    pub phy_lane_err_status: ::std::os::raw::c_uint,
    pub dl_lcrc_err_num: ::std::os::raw::c_uint,
    pub dl_dcrc_err_num: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_soc_die_stru {
    pub soc_die: [::std::os::raw::c_uint; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_flash_info_stru {
    pub flash_id: ::std::os::raw::c_ulonglong,
    pub device_id: ::std::os::raw::c_ushort,
    pub vendor: ::std::os::raw::c_ushort,
    pub state: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_ulonglong,
    pub sector_count: ::std::os::raw::c_uint,
    pub manufacturer_id: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_ecc_info_stru {
    pub enable_flag: ::std::os::raw::c_int,
    pub single_bit_error_count: ::std::os::raw::c_uint,
    pub double_bit_error_count: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcmi_memory_info_stru {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub freq: ::std::os::raw::c_uint,
    pub utiliza: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_soc_die_stru {
    pub soc_die: [::std::os::raw::c_uint; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_board_info_stru {
    pub board_id: ::std::os::raw::c_uint,
    pub pcb_id: ::std::os::raw::c_uint,
    pub bom_id: ::std::os::raw::c_uint,
    pub slot_id: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_pcie_idinfo {
    pub deviceid: ::std::os::raw::c_uint,
    pub venderid: ::std::os::raw::c_uint,
    pub subvenderid: ::std::os::raw::c_uint,
    pub subdeviceid: ::std::os::raw::c_uint,
    pub bdf_deviceid: ::std::os::raw::c_uint,
    pub bdf_busid: ::std::os::raw::c_uint,
    pub bdf_funcid: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dm_flash_info_stru {
    pub flash_id: ::std::os::raw::c_ulong,
    pub device_id: ::std::os::raw::c_ushort,
    pub vendor: ::std::os::raw::c_ushort,
    pub state: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_ulong,
    pub sector_count: ::std::os::raw::c_uint,
    pub manufacturer_id: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_aicore_info_stru {
    pub freq: ::std::os::raw::c_uint,
    pub curfreq: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_aicpu_info_stru {
    pub maxFreq: ::std::os::raw::c_uint,
    pub curFreq: ::std::os::raw::c_uint,
    pub aicpuNum: ::std::os::raw::c_uint,
    pub utilRate: [::std::os::raw::c_uint; 16usize],
}
pub type DSMI_AICPU_INFO = dsmi_aicpu_info_stru;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_ecc_info_stru {
    pub enable_flag: ::std::os::raw::c_int,
    pub single_bit_error_count: ::std::os::raw::c_uint,
    pub double_bit_error_count: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_ecc_pages_stru {
    pub corrected_ecc_errors_aggregate_total: ::std::os::raw::c_uint,
    pub uncorrected_ecc_errors_aggregate_total: ::std::os::raw::c_uint,
    pub isolated_pages_single_bit_error: ::std::os::raw::c_uint,
    pub isolated_pages_double_bit_error: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_hbm_info_stru {
    #[doc = "< HBM total size, KB"]
    pub memory_size: ::std::os::raw::c_ulonglong,
    #[doc = "< HBM freq, MHZ"]
    pub freq: ::std::os::raw::c_uint,
    #[doc = "< HBM memory_usage, KB"]
    pub memory_usage: ::std::os::raw::c_ulonglong,
    #[doc = "< HBM temperature"]
    pub temp: ::std::os::raw::c_int,
    pub bandwith_util_rate: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_memory_info_stru {
    pub memory_size: ::std::os::raw::c_ulonglong,
    pub freq: ::std::os::raw::c_uint,
    pub utiliza: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsmi_computing_power_info {
    pub data1: ::std::os::raw::c_uint,
    pub reserve: [::std::os::raw::c_uint; 3usize],
}
pub const dsmi_event_type_DMS_FAULT_EVENT: dsmi_event_type = 0;
pub const dsmi_event_type_DSMI_EVENT_TYPE_MAX: dsmi_event_type = 1;
pub type dsmi_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dms_fault_event {
    pub event_id: ::std::os::raw::c_uint,
    pub deviceid: ::std::os::raw::c_ushort,
    pub node_type: ::std::os::raw::c_uchar,
    pub node_id: ::std::os::raw::c_uchar,
    pub sub_node_type: ::std::os::raw::c_uchar,
    pub sub_node_id: ::std::os::raw::c_uchar,
    pub severity: ::std::os::raw::c_uchar,
    pub assertion: ::std::os::raw::c_uchar,
    pub event_serial_num: ::std::os::raw::c_int,
    pub notify_serial_num: ::std::os::raw::c_int,
    pub alarm_raised_time: ::std::os::raw::c_ulonglong,
    pub event_name: [::std::os::raw::c_char; 256usize],
    pub additional_info: [::std::os::raw::c_char; 32usize],
    pub os_id: ::std::os::raw::c_uchar,
    #[doc = "< os_id occupy 1 byte, reserve 31byte"]
    pub resv: [::std::os::raw::c_uchar; 31usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dsmi_event {
    pub type_: dsmi_event_type,
    pub event_t: dsmi_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dsmi_event__bindgen_ty_1 {
    pub dms_event: dms_fault_event,
}
pub type fault_event_callback = ::std::option::Option<unsafe extern "C" fn(event: *mut dsmi_event)>;
unsafe extern "C" {
    pub fn dcmi_get_card_num_list(
        card_num: *mut ::std::os::raw::c_int,
        card_list: *mut ::std::os::raw::c_int,
        list_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_pcie_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_idinfo: *mut dcmi_tag_pcie_idinfo,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_board_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        board_info: *mut dcmi_board_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_card_elabel(
        card_id: ::std::os::raw::c_int,
        elabel_info: *mut dcmi_elabel_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_set_license_info(
        card_id: ::std::os::raw::c_int,
        license: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_license_info(
        card_id: ::std::os::raw::c_int,
        data_info: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_customized_info_api(
        card_id: ::std::os::raw::c_int,
        data_info: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_customized_info_api(
        card_id: ::std::os::raw::c_int,
        data_info: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_clear_pcie_error_cnt(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_pcie_error_cnt(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        pcie_err_code_info: *mut dcmi_chip_pcie_err_rate_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_die(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_die: *mut dcmi_soc_die_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_ndie(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_ndie: *mut dsmi_soc_die_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_errorcode(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        error_count: *mut ::std::os::raw::c_int,
        error_code: *mut ::std::os::raw::c_uint,
        error_width: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_errorinfo(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        errorcode: ::std::os::raw::c_int,
        errorinfo: *mut ::std::os::raw::c_uchar,
        buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_flash_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        flash_index: ::std::os::raw::c_uint,
        flash_info: *mut dcmi_flash_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_aicore_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        aicore_info: *mut dsmi_aicore_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_aicpu_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        aicpu_info: *mut dsmi_aicpu_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_pre_reset_soc(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_rescan_soc(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_reset_device(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_upgrade_statues(
        card_id: ::std::os::raw::c_int,
        status: *mut ::std::os::raw::c_int,
        progress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_upgrade_status(
        card_id: ::std::os::raw::c_int,
        status: *mut ::std::os::raw::c_int,
        progress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_version(
        card_id: ::std::os::raw::c_int,
        version_str: *mut ::std::os::raw::c_char,
        max_version_len: ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_upgrade_control(
        card_id: ::std::os::raw::c_int,
        upgrade_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_upgrade_transfile(
        card_id: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_p2p_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_ecc_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_type: ::std::os::raw::c_int,
        device_ecc_info: *mut dsmi_ecc_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_hbm_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_hbm_info: *mut dsmi_hbm_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_memory_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_memory_info: *mut dcmi_memory_info_stru,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_device_hbm_product_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        hbm_product_info: *mut dcmi_hbm_product_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_soc_sensor_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        sensor_id: ::std::os::raw::c_int,
        sensor_info: *mut __BindgenOpaqueArray<u8, 0usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_config_ecc_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        enable_flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_version(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        verison_str: *mut ::std::os::raw::c_char,
        version_len: ::std::os::raw::c_uint,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_board_info(
        card_id: ::std::os::raw::c_int,
        board_info: *mut dcmi_board_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_mcu_get_power_info(
        card_id: ::std::os::raw::c_int,
        power: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_computing_power_info(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        computing_power: *mut dsmi_computing_power_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_device_ecc_enable(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        device_type: dcmi_device_type,
        enable_flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_user_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        config_name: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_user_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        config_name: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_clear_device_user_config(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        config_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_reset_device_inband(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_nve_level(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        nve_level: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_set_nve_level(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_system_time(
        card_id: ::std::os::raw::c_int,
        device_id: ::std::os::raw::c_int,
        time: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dcmi_get_all_device_count(
        all_device_count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
